AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template to create notification

Parameters:

  EmailAddress:
    Type: String
    Description: Email address to notify clean up result
  
  OwnerName:
    Type: String
    Description: An arbitrary tag name for the owner of these resources

  StackName:
    Type: String
    Description: The name of the stack to which these resources belong

Resources:

  ########## Topic ##########
  TopicNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Process-Notification
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email
      Tags:
        - Key: Name
          Value: !Sub topic-notification-${StackName}
        - Key: OwnerName
          Value: !Ref OwnerName
        - Key: StackName
          Value: !Ref StackName
  
  ########## Topic Policy ##########
  PolicyNotification:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: SnsTopicPolicy
          Effect: Allow
          Principal:
            Service: budgets.amazonaws.com
          Action: sns:Publish
          Resource: !Ref TopicNotification
      Topics:
        - Ref: TopicNotification

  ########## Notify Role ##########
  NotifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
      Tags:
        - Key: Name
          Value: !Sub notify-role-${StackName}
        - Key: OwnerName
          Value: !Ref OwnerName
        - Key: StackName
          Value: !Ref StackName

  ########## Notify Lambda ##########
  Notiy:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that handles notification
      Handler: index.lambda_handler
      Role: !GetAtt [ NotifyRole, Arn ]
      Runtime: python3.6
      FunctionName: notify_lambda
      Timeout: 300
      Code:
        ZipFile:
          !Sub
            - |-
              import json
              import time
              import botocore
              import boto3
              import logging
              logger = logging.getLogger(__name__)
              logger.setLevel(logging.INFO)
              def lambda_handler(event, context):
                try:
                  client = boto3.client('sns')
                  Iteration = event['Iteration']
                  Stopped = event['Stopped']
                  message = event['Message']
                  region = event['LambdaRegion']
                  Greetings = "Dear Student:\n The following message shows the result of the clean up process: "+"\n"
                  GroupName = event['LogGroupName']
                  StreamName = event['LogStreamName']
                  logs = get_logs(GroupName, StreamName, region)
                  logger.info('Cleaning >> Sending Notification...')
                  resus = client.publish(TopicArn='${TopicARN}', Message=Greetings+message + logs, Subject='Clean Notification')
                  response = {"statusCode": 200,"Message": "Succesfull"}
                  logger.info('Cleaning >> Finish...')
                  return response
                except botocore.exceptions.ClientError as e:
                  logger.info('Cleaning >> Error while notifying: '+str(e.response['Error']['Message']))
                  response = {"statusCode": 500,"Message": "Error"}
                  return response
              
              def get_logs(GroupName, StreamName, Region):
                try:
                  url = 'https://console.aws.amazon.com/cloudwatch/home?region='+Region+'#logEventViewer:group='+GroupName+';stream='+StreamName
                  logs = "\nExecution Logs:\n"
                  #client = boto3.client('logs')
                  #res = client.get_log_events(logGroupName=GroupName,logStreamName=StreamName)
                  #for event in res['events']:
                  #  if '[INFO]' in str(event['message']):
                  #    logs += str(event['timestamp'])+" "+str(event['message'])+""
                  #client.delete_log_stream(logGroupName=GroupName,logStreamName=StreamName)
                  #logs += "\nLogs taken from Log Group Name: "+GroupName+"  Stream: "+StreamName+"\n"
                  logs += url
                  return logs
                except botocore.exceptions.ClientError as e:
                  logger.info('Cleaning >> Error while getting logs: '+str(e.response['Error']['Message']))
                  return ""
            - TopicARN: !Ref TopicNotification
      Tags:
        - Key: Name
          Value: !Sub notify-lambda-${StackName}
        - Key: OwnerName
          Value: !Ref OwnerName
        - Key: StackName
          Value: !Ref StackName

Outputs:

  NotificationLambda:
    Description: Lambda to notify results
    Value: !GetAtt Notiy.Arn