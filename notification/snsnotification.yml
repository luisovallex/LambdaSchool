AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Template to create notification

Parameters:

  EmailAddress:
    Type: String
    Description: Email address to notify clean up result

  OwnerName:
    Type: String
    Default: ricardo
    Description: An arbitrary tag name for the owner of these resources

  StackName:
    Type: String
    Description: The name of the stack to which these resources belong

  Environment:
    Type: String
    Default: dev
    AllowedValues: [ prod, staging, dev, qa ]
    Description: Environment name to append to resources names and tags

Resources:

  ########## Topic ##########
  TopicNotification:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Budget-Notification
      Subscription:
        - Endpoint: !Ref EmailAddress
          Protocol: email
      Tags:
        - Key: Name
          Value: !Sub topic-notification-${Environment}
        - Key: Owner
          Value: !Ref OwnerName
        - Key: StackName
          Value: !Ref StackName
        - Key: Environment
          Value: !Ref Environment
  
  ########## Topic Policy ##########
  PolicyNotification:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: SnsTopicPolicy
          Effect: Allow
          Principal:
            Service: budgets.amazonaws.com
          Action: sns:Publish
          Resource: !Ref TopicNotification
      Topics:
        - Ref: TopicNotification

  ########## Notify Role ##########
  NotifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess

  ########## Notify Lambda ##########
  Notiy:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda function that handles notification
      Handler: index.lambda_handler
      Role: !GetAtt [ NotifyRole, Arn ]
      Runtime: python3.6
      FunctionName: NotifyRole
      Timeout: 300
      Code:
        ZipFile:
          !Sub
            - |-
              import json
              import time
              import botocore
              import boto3
              import logging
              logger = logging.getLogger(__name__)
              logger.setLevel(logging.INFO)
              def lambda_handler(event, context):
                try:
                  client = boto3.client('sns')
                  Iteration = event['Iteration']
                  Stopped = event['Stopped']
                  message = event['Message']
                  logger.info('Cleaning >> Sending Notification...')
                  resus = client.publish(TopicArn='${TopicARN}', Message=message, Subject='Clean Notification')
                  response = {"statusCode": 200,"Message": "Succesfull"}
                  logger.info('Cleaning >> Finish...')
                  return response
                except botocore.exceptions.ClientError as e:
                  logger.info('Cleaning >> Error while notifying: '+str(e.response['Error']['Message']))
                  response = {"statusCode": 500,"Message": "Error"}
                  return response
            - TopicARN: !Ref TopicNotification
      Tags:
        - Key: Name
          Value: !Sub lambda-notify-${Environment}
        - Key: Owner
          Value: !Ref OwnerName
        - Key: StackName
          Value: !Ref StackName
        - Key: Environment
          Value: !Ref Environment

Outputs:

  NotificationLambda:
    Description: Lambda to notify results
    Value: !GetAtt Notiy.Arn